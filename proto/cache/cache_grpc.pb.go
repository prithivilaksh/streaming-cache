// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/cache/cache.proto

package cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Cache_Get_FullMethodName       = "/cache.Cache/Get"
	Cache_GetStream_FullMethodName = "/cache.Cache/GetStream"
	Cache_Set_FullMethodName       = "/cache.Cache/Set"
	Cache_SetStream_FullMethodName = "/cache.Cache/SetStream"
)

// CacheClient is the client API for Cache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheClient interface {
	Get(ctx context.Context, in *Tkr, opts ...grpc.CallOption) (*TkrData, error)
	GetStream(ctx context.Context, in *Tkr, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TkrData], error)
	Set(ctx context.Context, in *TkrData, opts ...grpc.CallOption) (*Ack, error)
	SetStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TkrData, Ack], error)
}

type cacheClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

func (c *cacheClient) Get(ctx context.Context, in *Tkr, opts ...grpc.CallOption) (*TkrData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TkrData)
	err := c.cc.Invoke(ctx, Cache_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) GetStream(ctx context.Context, in *Tkr, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TkrData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[0], Cache_GetStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Tkr, TkrData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Cache_GetStreamClient = grpc.ServerStreamingClient[TkrData]

func (c *cacheClient) Set(ctx context.Context, in *TkrData, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Cache_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheClient) SetStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TkrData, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cache_ServiceDesc.Streams[1], Cache_SetStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TkrData, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Cache_SetStreamClient = grpc.BidiStreamingClient[TkrData, Ack]

// CacheServer is the server API for Cache service.
// All implementations must embed UnimplementedCacheServer
// for forward compatibility.
type CacheServer interface {
	Get(context.Context, *Tkr) (*TkrData, error)
	GetStream(*Tkr, grpc.ServerStreamingServer[TkrData]) error
	Set(context.Context, *TkrData) (*Ack, error)
	SetStream(grpc.BidiStreamingServer[TkrData, Ack]) error
	mustEmbedUnimplementedCacheServer()
}

// UnimplementedCacheServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCacheServer struct{}

func (UnimplementedCacheServer) Get(context.Context, *Tkr) (*TkrData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCacheServer) GetStream(*Tkr, grpc.ServerStreamingServer[TkrData]) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedCacheServer) Set(context.Context, *TkrData) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedCacheServer) SetStream(grpc.BidiStreamingServer[TkrData, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method SetStream not implemented")
}
func (UnimplementedCacheServer) mustEmbedUnimplementedCacheServer() {}
func (UnimplementedCacheServer) testEmbeddedByValue()               {}

// UnsafeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServer will
// result in compilation errors.
type UnsafeCacheServer interface {
	mustEmbedUnimplementedCacheServer()
}

func RegisterCacheServer(s grpc.ServiceRegistrar, srv CacheServer) {
	// If the following call pancis, it indicates UnimplementedCacheServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cache_ServiceDesc, srv)
}

func _Cache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tkr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Get(ctx, req.(*Tkr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Tkr)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheServer).GetStream(m, &grpc.GenericServerStream[Tkr, TkrData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Cache_GetStreamServer = grpc.ServerStreamingServer[TkrData]

func _Cache_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TkrData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cache_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).Set(ctx, req.(*TkrData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cache_SetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheServer).SetStream(&grpc.GenericServerStream[TkrData, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Cache_SetStreamServer = grpc.BidiStreamingServer[TkrData, Ack]

// Cache_ServiceDesc is the grpc.ServiceDesc for Cache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Cache_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Cache_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Cache_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetStream",
			Handler:       _Cache_SetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/cache/cache.proto",
}
